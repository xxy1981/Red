/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xxy.stock.web.action;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.springframework.util.comparator.CompoundComparator;

import com.xxy.stock.web.bo.BuySellRate;
import com.xxy.stock.web.bo.RateBigComparator;
import com.xxy.stock.web.bo.RateBigTimeComparator;
import com.xxy.stock.web.bo.RateComparator;
import com.xxy.stock.web.bo.RateLbComparator;
import com.xxy.stock.web.bo.RateZfComparator;
import com.xxy.stock.web.bo.StockBuyComparator;
import com.xxy.stock.web.bo.StockCache;
import com.xxy.stock.web.bo.StockComparator;
import com.xxy.stock.web.bo.StockSellComparator;
import com.xxy.stock.web.bo.StockStrongComparator;
import com.xxy.stock.web.bo.StockTencent;
import com.xxy.stock.web.constants.StockWebsiteConstants;
import com.xxy.stock.web.util.StockHelper;

/**
 * MyEclipse Struts Creation date: 04-02-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="success" path="/index.jsp"
 */
public class RefreshStockAction extends BaseAction implements StockWebsiteConstants {

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws InterruptedException 
	 */
	public ActionForward doExecute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws InterruptedException {

		ActionMessages messages = new ActionMessages();

		String action = request.getParameter(ACTION);

		if (action == null || "".equalsIgnoreCase(action)) {
			return mapping.findForward(FWD_FAILURE);
		} else if (ACTION_FALSE.equalsIgnoreCase(action)) {
			return mapping.findForward(FWD_FAILURE);
		} else if ("always".equalsIgnoreCase(action)) {
			return doRefreshAlways(mapping, form, request, response);
		} else if ("xydp".equalsIgnoreCase(action)) {
			return doRefreshXydp(mapping, form, request, response);
		} else if ("mmgd".equalsIgnoreCase(action)) {
			return doRefreshMmgd(mapping, form, request, response);
		} else if ("rate".equalsIgnoreCase(action)) {
			return doRefreshRate(mapping, form, request, response);
		} else if ("all".equalsIgnoreCase(action)) {
			return doRefreshAll(mapping, form, request, response);
		} else if ("initial".equalsIgnoreCase(action)) {
			return doInitial(mapping, form, request, response);
		} else if ("refresh".equalsIgnoreCase(action)) {
			return doRefresh(mapping, form, request, response);
		} else if ("refreshCapital".equalsIgnoreCase(action)) {
			return doRefreshCapital(mapping, form, request, response);
		} else if ("refreshRate".equalsIgnoreCase(action)) {
			return doRefreshAllRate(mapping, form, request, response);
		} else if ("jjAlways".equalsIgnoreCase(action)) {
			return doRefreshJjAlways(mapping, form, request, response);
		} else if ("xdqs".equalsIgnoreCase(action)) {
			return doRefreshXdqs(mapping, form, request, response);
		} else if ("initialSelect".equalsIgnoreCase(action)) {
			return doInitialSelect(mapping, form, request, response);
		} else if ("uploadSelect".equalsIgnoreCase(action)) {
			return doUploadSelect(mapping, form, request, response);
		} else if ("initialBlock".equalsIgnoreCase(action)) {
			return doInitialBlock(mapping, form, request, response);
		} else if ("uploadBlock".equalsIgnoreCase(action)) {
			return doUploadBlock(mapping, form, request, response);
		} else if ("downloadBlock".equalsIgnoreCase(action)) {
			return doDownloadBlock(mapping, form, request, response);
		} else if ("download50".equalsIgnoreCase(action)) {
			return doDownloadToTdx(mapping, form, request, response,50);
		} else if ("download100".equalsIgnoreCase(action)) {
			return doDownloadToTdx(mapping, form, request, response,100);
		} else if ("local50".equalsIgnoreCase(action)) {
			return doLocalToTdx(mapping, form, request, response,50);
		} else if ("local100".equalsIgnoreCase(action)) {
			return doLocalToTdx(mapping, form, request, response,100);
		} else if ("add".equalsIgnoreCase(action)) {
            return doAddViewStock(mapping, form, request, response);
        }else {
			messages.add(ActionMessages.GLOBAL_MESSAGE, new ActionMessage("error.no.action"));
			saveMessages(request, messages);
			return mapping.findForward(FWD_FAILURE);
		}

	}

	// 刷新页面所有一直处于均价线上的股票(全天股价一直处于均价线上,涨幅大于等于0,途中未跌破均价线)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshAlways(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, StockTencent> map = StockCache.getStockMap();

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getZf() < 0
					|| stock.getAlwaysStrongFlag() < 0
					|| stock.getCloseToday() < stock.getJj()
					|| stock.getCloseYesterday() <= 0) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		cc.addComparator(new StockComparator(),true);
		cc.addComparator(new StockStrongComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("always");

	}

	// 刷新页面均价线一直攀升的股票(全天均价线一直上扬,实时均价线上,涨幅大于等于0,价格途中可跌破均价线)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshJjAlways(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		Map<String, StockTencent> map = StockCache.getStockMap();

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getZf() < 0
					|| stock.getJjStrongFlag() < 0
					|| stock.getCloseToday() < stock.getJj()
					|| stock.getCloseYesterday() <= 0) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		cc.addComparator(new StockComparator(),true);
		cc.addComparator(new StockStrongComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("jjAlways");

	}

	// 刷新页面相对强势的股票(全天大部分时间处均价线上,涨幅大于等0,实时均价线上,均价线可涨可跌,价格途中可跌破均价线)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshXdqs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		//long startTime = System.currentTimeMillis();
		Map<String, StockTencent> map = StockCache.getStockMap();

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getZf() < 0
					|| stock.getUpJjTimes() < 0
					|| stock.getCloseToday() < stock.getJj()
					|| stock.getCloseYesterday() <= 0) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		cc.addComparator(new StockStrongComparator(),true);
		cc.addComparator(new StockComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);
		
		//long endTime = System.currentTimeMillis();
		//System.out.println("page- refresh cost " + (endTime - startTime) + " ms");
		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("xdqs");

	}

	// 刷新页面星宇盯盘的股票(全天大部分时间处均价线上,涨幅大于等0,实时均价线上,均价线可涨可跌,价格途中可跌破均价线,强度大于刷新时间一半,非ST股)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshXydp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, StockTencent> map = StockCache.getStockMap();

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getZf() < 0
					|| stock.getUpJjTimes() < stock.getUpdateSum()/3
					|| stock.getCloseToday() < stock.getJj()
					|| stock.getCloseYesterday() <= 0
					|| stock.getName().contains("S")
					|| stock.getLtsz() > ZXG_LTSZ
					|| stock.getLb() < ZXG_LB) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		cc.addComparator(new StockStrongComparator(),true);
		cc.addComparator(new StockComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("xydp");

	}
	
	// 刷新页面星宇盯盘的股票(全天大部分时间处均价线上,涨幅大于等0,实时均价线上,均价线可涨可跌,价格途中可跌破均价线,强度大于刷新时间一半,非ST股)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshMmgd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, StockTencent> map = StockCache.getStockMap();
		
		String sort = request.getParameter("sort");

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getZf() < 0
					|| stock.getUpJjTimes() < stock.getUpdateSum()/3
					|| stock.getCloseToday() < stock.getJj()
					|| stock.getCloseYesterday() <= 0
					|| stock.getName().contains("S")
					|| stock.getLtsz() > ZXG_LTSZ
					|| stock.getLb() < ZXG_LB) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		if("s".equals(sort)){
			cc.addComparator(new StockSellComparator(),true);
		}else{
			cc.addComparator(new StockBuyComparator(),true);
		}
		cc.addComparator(new StockComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("mmgd");

	}
	
	// 刷新页面星宇盯盘的股票(全天大部分时间处均价线上,涨幅大于等0,实时均价线上,均价线可涨可跌,价格途中可跌破均价线,强度大于刷新时间一半,非ST股)
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshRate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, BuySellRate> map = StockCache.getRateMap();
		
		String type = request.getParameter("type");

		List<BuySellRate> list = new ArrayList<BuySellRate>();
		BuySellRate rate = null;
		for (Map.Entry<String, BuySellRate> entry : map.entrySet()) {
			rate = entry.getValue();
			if (rate.getZf() < 0
					//|| rate.getUpJjTimes() < rate.getUpdateSum()/3
					//|| rate.getCloseToday() < rate.getJj()
					|| rate.getName().contains("S")
					|| rate.getLtsz() > ZXG_LTSZ
					|| rate.getLb() < ZXG_LB) {
				continue;
			}
			list.add(rate);
		}

		CompoundComparator cc = new CompoundComparator();
		if("big".equals(type)){
			cc.addComparator(new RateBigComparator(),true);
		}else if("lb".equals(type)){
			cc.addComparator(new RateLbComparator(),true);
		}else if("time".equals(type)){
            cc.addComparator(new RateBigTimeComparator(),true);
        }else{
			cc.addComparator(new RateComparator(),true);
		}
		cc.addComparator(new RateZfComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("rate");

	}

	
	// 刷新页面沪深所有股票信息
	@SuppressWarnings("unchecked")
	public ActionForward doRefreshAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		Map<String, StockTencent> map = StockCache.getStockMap();

		List<StockTencent> list = new ArrayList<StockTencent>();
		StockTencent stock = null;
		for (Map.Entry<String, StockTencent> entry : map.entrySet()) {
			stock = entry.getValue();
			if (stock.getDoneQuantity() == 0 || stock.getCloseYesterday() <= 0) {
				continue;
			}
			list.add(stock);
		}

		CompoundComparator cc = new CompoundComparator();
		cc.addComparator(new StockComparator(),true);
		cc.addComparator(new StockStrongComparator(),true);
		
		Collections.sort(list, cc);
		request.setAttribute("stockList", list);

		// System.out.println("page- refresh success at " + new Date());

		return mapping.findForward("all");

	}
	
	
	// 下载星宇盯盘的股票前100或50名到客户端
	public ActionForward doDownloadToTdx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response, int number) {

		StockHelper.doDownloadZxg(response, number);

		// System.out.println("page- refresh success at " + new Date());

		return null;

	}
	

	// 将星宇盯盘的股票前100或50名写文件到通达信目录自选股
	public ActionForward doLocalToTdx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response, int number) {

		StockHelper.doLocalWriteZxgFile(number);

		// System.out.println("page- refresh success at " + new Date());

		return doRefreshXydp(mapping, form, request, response);

	}

	
	// 初始化沪深所有股票信息（雷同当日开盘前初始化股票信息，所有统计数据清零）
	public ActionForward doInitial(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws InterruptedException {

		StockHelper.doInitialAllStock();

		return mapping.findForward("main");

	}

	// 刷新沪深所有股票信息（雷同每分钟一次刷新数据）
	public ActionForward doRefresh(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		StockHelper.doRefreshAllStock();

		return mapping.findForward("main");

	}

	// 刷新沪深所有股票买卖比率信息（雷同每分钟一次刷新数据）
	public ActionForward doRefreshAllRate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		StockHelper.doRefreshAllStockBuySellRate();

		return mapping.findForward("main");

	}

	// 刷新沪深所有股票的资金流向信息
	public ActionForward doRefreshCapital(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		//SqliteUtilTest.testDemo();
		
		return mapping.findForward("main");

	}
	
	// 初始化沪深所有股票板块信息
	public ActionForward doInitialBlock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		StockHelper.doInitialAllBlock();

		return mapping.findForward("main");

	}
	
	// 上传沪深所有股票板块信息
	public ActionForward doUploadBlock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		StockHelper.doUploadAllBlock(request);
		StockHelper.doInitialAllBlock();
		
		return mapping.findForward("main");

	}
	
	// 下载沪深所有股票板块信息
	public ActionForward doDownloadBlock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		StockHelper.doDownloadAllBlock(response);
		
		//return mapping.findForward("main");
		return null;
		
	}

	// 初始化通达信软件选股信息
	public ActionForward doInitialSelect(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		StockHelper.doInitialSelectStock();

		return mapping.findForward("xydp");

	}
	
	// 上传通达信软件选股信息
	public ActionForward doUploadSelect(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		StockHelper.doUploadSelectStock(request);
		StockHelper.doInitialSelectStock();
		
		return doRefreshXydp(mapping, form, request, response);

	}
	
	// 将股票写入实时盯盘板块
    public ActionForward doAddViewStock(ActionMapping mapping, ActionForm form,
            HttpServletRequest request, HttpServletResponse response) {

        //StockHelper.doAddViewFile(request.getParameter("code"));
        new Thread( () -> {StockHelper.doAddViewFile(request.getParameter("code"));} ).start();

        return doRefreshXydp(mapping, form, request, response);

    }

}