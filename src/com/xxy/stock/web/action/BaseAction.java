/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xxy.stock.web.action;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionMessage;

import com.xxy.stock.web.constants.Constants;

/**
 * MyEclipse Struts
 * Creation date: 03-24-2008
 *
 * XDoclet definition:
 * @struts.action parameter="action" validate="true"
 */
abstract public class BaseAction extends Action implements Constants{

    private static final Logger log = Logger.getLogger(BaseAction.class);

    protected ServletContext servletContext;

    public BaseAction() {
    }

    public void setServletContext(ServletContext stx) {
        this.servletContext = stx;
    }

    /**
     * Method execute
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward execute(ActionMapping mapping, ActionForm form,
                                 HttpServletRequest request,
                                 HttpServletResponse response) throws Exception {
        // TODO Auto-generated method stub

        init(mapping, form, request, response);
        ActionForward pre = preExecute(mapping, form, request, response);
        if (pre != null) {
            return pre;
        }
        return doExecute(mapping, form, request, response);
    }

    protected ActionForward preExecute(ActionMapping mapping, ActionForm form,
                                       HttpServletRequest request,
                                       HttpServletResponse response) {

        // check user is logon
        log.debug("Request Path ------> " + mapping.getPath());
        if (mapping.getPath() != null &&
            !mapping.getPath().startsWith("/login") &&
            !mapping.getPath().startsWith("/changePassword")) {
            if (request.getSession().getAttribute(MY_ACCOUNT_ID) == null) {
                log.info("The user don't logon ......");
                return mapping.findForward(FWD_LOGIN);
            }
        }

        return null;
    }

    abstract protected ActionForward doExecute(ActionMapping mapping,
                                               ActionForm form,
                                               HttpServletRequest request,
                                               HttpServletResponse response) throws
        Exception;

    protected void init(ActionMapping mapping, ActionForm form,
                        HttpServletRequest request,
                        HttpServletResponse response) {

        // some initialization
    }

    /**
     * Convenience method to get Spring-initialized beans
     *
     * @param name
     * @return Object bean from ApplicationContext
     */
    public Object getBean(String name) {
        ApplicationContext ctx =
            WebApplicationContextUtils.getRequiredWebApplicationContext(servlet.getServletContext());
        log.debug("Get manager is : ---> " + ctx.getBean(name).toString());
        return ctx.getBean(name);
    }

    @SuppressWarnings("deprecation")
	public void saveOtherError(HttpServletRequest request, ActionErrors errors, String field, String errKey) {
        request.setAttribute("isOtherErr", Boolean.TRUE);
        errors.add(field, new ActionMessage(errKey));
        saveErrors(request, errors);
    }

    public String getMyAccountId(HttpServletRequest request) {
        try {
            return (String)request.getSession().getAttribute(MY_ACCOUNT_ID);
        }
        catch (Exception ex) {
            return null;
        }
    }

}
